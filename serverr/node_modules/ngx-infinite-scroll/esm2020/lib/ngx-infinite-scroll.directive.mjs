import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { hasWindowDefined, inputPropChanged } from './services/ngx-ins-utils';
import { createScroller, InfiniteScrollActions, } from './services/scroll-register';
import * as i0 from "@angular/core";
export class InfiniteScrollDirective {
    constructor(element, zone) {
        this.element = element;
        this.zone = zone;
        this.scrolled = new EventEmitter();
        this.scrolledUp = new EventEmitter();
        this.infiniteScrollDistance = 2;
        this.infiniteScrollUpDistance = 1.5;
        this.infiniteScrollThrottle = 150;
        this.infiniteScrollDisabled = false;
        this.infiniteScrollContainer = null;
        this.scrollWindow = true;
        this.immediateCheck = false;
        this.horizontal = false;
        this.alwaysCallback = false;
        this.fromRoot = false;
    }
    ngAfterViewInit() {
        if (!this.infiniteScrollDisabled) {
            this.setup();
        }
    }
    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance, }) {
        const containerChanged = inputPropChanged(infiniteScrollContainer);
        const disabledChanged = inputPropChanged(infiniteScrollDisabled);
        const distanceChanged = inputPropChanged(infiniteScrollDistance);
        const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||
            (disabledChanged && !infiniteScrollDisabled.currentValue) ||
            distanceChanged;
        if (containerChanged || disabledChanged || distanceChanged) {
            this.destroyScroller();
            if (shouldSetup) {
                this.setup();
            }
        }
    }
    setup() {
        if (hasWindowDefined()) {
            this.zone.runOutsideAngular(() => {
                this.disposeScroller = createScroller({
                    fromRoot: this.fromRoot,
                    alwaysCallback: this.alwaysCallback,
                    disable: this.infiniteScrollDisabled,
                    downDistance: this.infiniteScrollDistance,
                    element: this.element,
                    horizontal: this.horizontal,
                    scrollContainer: this.infiniteScrollContainer,
                    scrollWindow: this.scrollWindow,
                    throttle: this.infiniteScrollThrottle,
                    upDistance: this.infiniteScrollUpDistance,
                }).subscribe((payload) => this.zone.run(() => this.handleOnScroll(payload)));
            });
        }
    }
    handleOnScroll({ type, payload }) {
        switch (type) {
            case InfiniteScrollActions.DOWN:
                return this.scrolled.emit(payload);
            case InfiniteScrollActions.UP:
                return this.scrolledUp.emit(payload);
            default:
                return;
        }
    }
    ngOnDestroy() {
        this.destroyScroller();
    }
    destroyScroller() {
        if (this.disposeScroller) {
            this.disposeScroller.unsubscribe();
        }
    }
}
InfiniteScrollDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: InfiniteScrollDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
InfiniteScrollDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.2", type: InfiniteScrollDirective, selector: "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", inputs: { infiniteScrollDistance: "infiniteScrollDistance", infiniteScrollUpDistance: "infiniteScrollUpDistance", infiniteScrollThrottle: "infiniteScrollThrottle", infiniteScrollDisabled: "infiniteScrollDisabled", infiniteScrollContainer: "infiniteScrollContainer", scrollWindow: "scrollWindow", immediateCheck: "immediateCheck", horizontal: "horizontal", alwaysCallback: "alwaysCallback", fromRoot: "fromRoot" }, outputs: { scrolled: "scrolled", scrolledUp: "scrolledUp" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: InfiniteScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { scrolled: [{
                type: Output
            }], scrolledUp: [{
                type: Output
            }], infiniteScrollDistance: [{
                type: Input
            }], infiniteScrollUpDistance: [{
                type: Input
            }], infiniteScrollThrottle: [{
                type: Input
            }], infiniteScrollDisabled: [{
                type: Input
            }], infiniteScrollContainer: [{
                type: Input
            }], scrollWindow: [{
                type: Input
            }], immediateCheck: [{
                type: Input
            }], horizontal: [{
                type: Input
            }], alwaysCallback: [{
                type: Input
            }], fromRoot: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluZmluaXRlLXNjcm9sbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaW5maW5pdGUtc2Nyb2xsL3NyYy9saWIvbmd4LWluZmluaXRlLXNjcm9sbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUlMLE1BQU0sR0FFUCxNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RSxPQUFPLEVBQ0wsY0FBYyxFQUNkLHFCQUFxQixHQUN0QixNQUFNLDRCQUE0QixDQUFDOztBQUtwQyxNQUFNLE9BQU8sdUJBQXVCO0lBbUJsQyxZQUFvQixPQUFtQixFQUFVLElBQVk7UUFBekMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7UUFoQm5ELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBd0IsQ0FBQztRQUNwRCxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQXdCLENBQUM7UUFFdkQsMkJBQXNCLEdBQVcsQ0FBQyxDQUFDO1FBQ25DLDZCQUF3QixHQUFXLEdBQUcsQ0FBQztRQUN2QywyQkFBc0IsR0FBVyxHQUFHLENBQUM7UUFDckMsMkJBQXNCLEdBQVksS0FBSyxDQUFDO1FBQ3hDLDRCQUF1QixHQUFRLElBQUksQ0FBQztRQUNwQyxpQkFBWSxHQUFZLElBQUksQ0FBQztRQUM3QixtQkFBYyxHQUFZLEtBQUssQ0FBQztRQUNoQyxlQUFVLEdBQVksS0FBSyxDQUFDO1FBQzVCLG1CQUFjLEdBQVksS0FBSyxDQUFDO1FBQ2hDLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFJNkIsQ0FBQztJQUVqRSxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUNoQyxJQUFJLENBQUMs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Ryx1QkFBdUI7c0JBQS9CLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csY0FBYztzQkFBdEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IElJbmZpbml0ZVNjcm9sbEV2ZW50LCBJSW5maW5pdGVTY3JvbGxBY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgaGFzV2luZG93RGVmaW5lZCwgaW5wdXRQcm9wQ2hhbmdlZCB9IGZyb20gJy4vc2VydmljZXMvbmd4LWlucy11dGlscyc7XG5pbXBvcnQge1xuICBjcmVhdGVTY3JvbGxlcixcbiAgSW5maW5pdGVTY3JvbGxBY3Rpb25zLFxufSBmcm9tICcuL3NlcnZpY2VzL3Njcm9sbC1yZWdpc3Rlcic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpbmZpbml0ZVNjcm9sbF0sIFtpbmZpbml0ZS1zY3JvbGxdLCBbZGF0YS1pbmZpbml0ZS1zY3JvbGxdJyxcbn0pXG5leHBvcnQgY2xhc3MgSW5maW5pdGVTY3JvbGxEaXJlY3RpdmVcbiAgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdFxue1xuICBAT3V0cHV0KCkgc2Nyb2xsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElJbmZpbml0ZVNjcm9sbEV2ZW50PigpO1xuICBAT3V0cHV0KCkgc2Nyb2xsZWRVcCA9IG5ldyBFdmVudEVtaXR0ZXI8SUluZmluaXRlU2Nyb2xsRXZlbnQ+KCk7XG5cbiAgQElucHV0KCkgaW5maW5pdGVTY3JvbGxEaXN0YW5jZTogbnVtYmVyID0gMjtcbiAgQElucHV0KCkgaW5maW5pdGVTY3JvbGxVcERpc3RhbmNlOiBudW1iZXIgPSAxLjU7XG4gIEBJbnB1dCgpIGluZmluaXRlU2Nyb2xsVGhyb3R0bGU6IG51bWJlciA9IDE1MDtcbiAgQElucHV0KCkgaW5maW5pdGVTY3JvbGxEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBpbmZpbml0ZVNjcm9sbENvbnRhaW5lcjogYW55ID0gbnVsbDtcbiAgQElucHV0KCkgc2Nyb2xsV2luZG93OiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgaW1tZWRpYXRlQ2hlY2s6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgaG9yaXpvbnRhbDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBhbHdheXNDYWxsYmFjazogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBmcm9tUm9vdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgZGlzcG9zZVNjcm9sbGVyOiBTdWJzY3JpcHRpb24gfCBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHpvbmU6IE5nWm9uZSkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLmluZmluaXRlU2Nyb2xsRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyh7XG4gICAgaW5maW5pdGVTY3JvbGxDb250YWluZXIsXG4gICAgaW5maW5pdGVTY3JvbGxEaXNhYmxlZCxcbiAgICBpbmZpbml0ZVNjcm9sbERpc3RhbmNlLFxuICB9OiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3QgY29udGFpbmVyQ2hhbmdlZCA9IGlucHV0UHJvcENoYW5nZWQoaW5maW5pdGVTY3JvbGxDb250YWluZXIpO1xuICAgIGNvbnN0IGRpc2FibGVkQ2hhbmdlZCA9IGlucHV0UHJvcENoYW5nZWQoaW5maW5pdGVTY3JvbGxEaXNhYmxlZCk7XG4gICAgY29uc3QgZGlzdGFuY2VDaGFuZ2VkID0gaW5wdXRQcm9wQ2hhbmdlZChpbmZpbml0ZVNjcm9sbERpc3RhbmNlKTtcbiAgICBjb25zdCBzaG91bGRTZXR1cCA9XG4gICAgICAoIWRpc2FibGVkQ2hhbmdlZCAmJiAhdGhpcy5pbmZpbml0ZVNjcm9sbERpc2FibGVkKSB8fFxuICAgICAgKGRpc2FibGVkQ2hhbmdlZCAmJiAhaW5maW5pdGVTY3JvbGxEaXNhYmxlZC5jdXJyZW50VmFsdWUpIHx8XG4gICAgICBkaXN0YW5jZUNoYW5nZWQ7XG5cbiAgICBpZiAoY29udGFpbmVyQ2hhbmdlZCB8fCBkaXNhYmxlZENoYW5nZWQgfHwgZGlzdGFuY2VDaGFuZ2VkKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lTY3JvbGxlcigpO1xuICAgICAgaWYgKHNob3VsZFNldHVwKSB7XG4gICAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXR1cCgpIHtcbiAgICBpZiAoaGFzV2luZG93RGVmaW5lZCgpKSB7XG4gICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3Bvc2VTY3JvbGxlciA9IGNyZWF0ZVNjcm9sbGVyKHtcbiAgICAgICAgICBmcm9tUm9vdDogdGhpcy5mcm9tUm9vdCxcbiAgICAgICAgICBhbHdheXNDYWxsYmFjazogdGhpcy5hbHdheXNDYWxsYmFjayxcbiAgICAgICAgICBkaXNhYmxlOiB0aGlzLmluZmluaXRlU2Nyb2xsRGlzYWJsZWQsXG4gICAgICAgICAgZG93bkRpc3RhbmNlOiB0aGlzLmluZmluaXRlU2Nyb2xsRGlzdGFuY2UsXG4gICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICAgIGhvcml6b250YWw6IHRoaXMuaG9yaXpvbnRhbCxcbiAgICAgICAgICBzY3JvbGxDb250YWluZXI6IHRoaXMuaW5maW5pdGVTY3JvbGxDb250YWluZXIsXG4gICAgICAgICAgc2Nyb2xsV2luZG93OiB0aGlzLnNjcm9sbFdpbmRvdyxcbiAgICAgICAgICB0aHJvdHRsZTogdGhpcy5pbmZpbml0ZVNjcm9sbFRocm90dGxlLFxuICAgICAgICAgIHVwRGlzdGFuY2U6IHRoaXMuaW5maW5pdGVTY3JvbGxVcERpc3RhbmNlLFxuICAgICAgICB9KS5zdWJzY3JpYmUoKHBheWxvYWQ6IGFueSkgPT5cbiAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHRoaXMuaGFuZGxlT25TY3JvbGwocGF5bG9hZCkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVPblNjcm9sbCh7IHR5cGUsIHBheWxvYWQgfTogSUluZmluaXRlU2Nyb2xsQWN0aW9uKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEluZmluaXRlU2Nyb2xsQWN0aW9ucy5ET1dOOlxuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxlZC5lbWl0KHBheWxvYWQpO1xuXG4gICAgICBjYXNlIEluZmluaXRlU2Nyb2xsQWN0aW9ucy5VUDpcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsZWRVcC5lbWl0KHBheWxvYWQpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95U2Nyb2xsZXIoKTtcbiAgfVxuXG4gIGRlc3Ryb3lTY3JvbGxlcigpIHtcbiAgICBpZiAodGhpcy5kaXNwb3NlU2Nyb2xsZXIpIHtcbiAgICAgIHRoaXMuZGlzcG9zZVNjcm9sbGVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=